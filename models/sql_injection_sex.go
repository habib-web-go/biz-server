// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SQLInjectionSex sql injection sex
//
// swagger:model sqlInjectionSex
type SQLInjectionSex string

func NewSQLInjectionSex(value SQLInjectionSex) *SQLInjectionSex {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SQLInjectionSex.
func (m SQLInjectionSex) Pointer() *SQLInjectionSex {
	return &m
}

const (

	// SQLInjectionSexMan captures enum value "Man"
	SQLInjectionSexMan SQLInjectionSex = "Man"

	// SQLInjectionSexFemale captures enum value "Female"
	SQLInjectionSexFemale SQLInjectionSex = "Female"
)

// for schema
var sqlInjectionSexEnum []interface{}

func init() {
	var res []SQLInjectionSex
	if err := json.Unmarshal([]byte(`["Man","Female"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sqlInjectionSexEnum = append(sqlInjectionSexEnum, v)
	}
}

func (m SQLInjectionSex) validateSQLInjectionSexEnum(path, location string, value SQLInjectionSex) error {
	if err := validate.EnumCase(path, location, value, sqlInjectionSexEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sql injection sex
func (m SQLInjectionSex) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSQLInjectionSexEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sql injection sex based on context it is used
func (m SQLInjectionSex) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
